inventario-tesoreria-frontend/
│
├── assets/
│   ├── css/Add commentMore actions
│   │   ├── main.css                # Estilos principales
│   │   ├── components/             # Estilos por componentes
│   │   │   ├── buttons.css
│   │   │   ├── forms.css
│   │   │   ├── tables.css
│   │   │   ├── notifications.css
│   │   │   └── modals.css
│   │   └── views/                  # Estilos por vistas
│   │       ├── compras.css
│   │       ├── gastos.css
│   │       ├── inventario.css
│   │       ├── proveedores.css
│   │       ├── dashboard.css
│   │       └── login.css 
│   │       └── usuarios.css        
│   │
│   ├── js/
│   │   ├── app.js                  # Configuración principal
│   │   ├── api/                    # Conexión con endpoints
│   │   │   ├── api.js              # Configuración base de la API
│   │   │   ├── compras.js
│   │   │   ├── gastos.js
│   │   │   ├── inventario.js
│   │   │   ├── proveedores.js
│   │   │   └── usuarios.js
│   │   ├── components/             # Componentes reutilizables
│   │   │   ├── modal.js
│   │   │   ├── notifications.js
│   │   │   ├── sidebar.js
│   │   │   └── table-manager.js
│   │   └── views/                  # Lógica por vista
│   │       ├── compras.js
│   │       ├── gastos.js
│   │       ├── inventario.js
│   │       ├── proveedores.js
│   │       ├── login.js
│   │       └── usuarios.js
│   │
│   └── images/                     # Imágenes e iconos
│
├── views/
│   ├── partials/                   # Componentes reutilizables
│   │   ├── header.html
│   │   ├── sidebar.html
│   │   ├── footer.html
│   │   └── modal-base.html
│   │
│   ├── compras/                    # Vistas de compras (Añadir)
│   │   ├── listar.html
│   │   ├── registrar.html
│   │   └── editar.html
│   │
│   ├── gastos/                     # Vistas de gastos
│   │   ├── listar.html
│   │   ├── registrar.html
│   │   └── editar.html
│   │
│   ├── inventario/                 # Vistas de inventario
│   │   ├── listar.html
│   │   ├── registrar.html
│   │   └── editar.html
│   │
│   ├── proveedores/                # Vistas de proveedores
│   │   ├── listar.html
│   │   ├── registrar.html
│   │   └── editar.html
│   │
│   ├── usuarios/                   # Vistas de usuarios
│   │   ├── listar.html
│   │   ├── registrar.html
│   │   └── editar.html
│   │
│   ├── dashboard.html              # Página principal
│   ├── login.html                  # Página de inicio de sesión
│   └── 404.html                    # Página de error
│
├── index.html                      # Punto de entrada principal
└── README.md                       # Documentación del frontend
=======================================================================
                        Orden de Implementación
=======================================================================
Vamos a construir el frontend paso a paso, siguiendo un orden lógico que garantice una base sólida y consistente. Aquí está la secuencia recomendada:

### **Orden de Implementación**

1. **Estructura Base y Configuración Inicial**
   - `index.html` (Punto de entrada principal)
   - `assets/css/main.css` (Estilos base y variables CSS)
   - `assets/js/app.js` (Configuración inicial del router y carga de vistas)

2. **Componentes Globales**
   - `views/partials/header.html` (Barra de navegación superior)
   - `views/partials/sidebar.html` (Menú lateral)
   - `views/partials/footer.html` (Pie de página)
   - `views/partials/modal-base.html` (Plantilla para modales)

3. **Sistema de Autenticación**
   - `views/login.html` (Página de inicio de sesión)
   - `assets/css/views/login.css` (Estilos específicos para login)
   - `assets/js/api/login.js` (Métodos de autenticación)

4. **Dashboard Principal**
   - `views/dashboard.html` (Vista principal después del login)
   - `assets/css/views/dashboard.css` (Estilos del dashboard)

5. **Componentes Reutilizables (JS)**
   - `assets/js/components/modal.js` (Gestión de modales)
   - `assets/js/components/notifications.js` (Notificaciones toast)
   - `assets/js/components/table-manager.js` (Manipulación de tablas)

6. **Estilos de Componentes**
   - `assets/css/components/buttons.css` (Botones primarios, secundarios, etc.)
   - `assets/css/components/forms.css` (Inputs, selects, labels)
   - `assets/css/components/tables.css` (Tablas con estilo profesional)
   - `assets/css/components/modals.css` (Estilos para ventanas modales)

7. **Vistas CRUD (Priorizar según necesidad)**
   - **Inventario** (Ejemplo inicial):
     - `views/inventario/listar.html` (Tabla de items)
     - `views/inventario/registrar.html` (Formulario de registro)
     - `assets/js/views/inventario.js` (Lógica de la vista)
     - `assets/js/api/inventario.js` (Conexión con API)
     - `assets/css/views/inventario.css` (Estilos específicos)

   - Luego repetir para:
     - Compras (`compras/`)
     - Gastos (`gastos/`)
     - Proveedores (`proveedores/`)
     - Usuarios (`usuarios/`)

8. **Página de Error**
   - `views/404.html` (Página para rutas no encontradas)

9. **Documentación**
   - `README.md` (Instrucciones de instalación y uso)
=======================================================================
                   Conexion con el API
=======================================================================

## ✅ **Módulos ya utilizables con la API disponible**

1. ### 🔐 **Autenticación**

   Aunque el backend no incluye explícitamente un endpoint de login en tu descripción, si ya lo tienes implementado, puedes conectar `views/login.html` y `assets/js/views/login.js` al endpoint correspondiente. Si no, podrías comenzar agregando ese endpoint (`/api/login`) en el backend para autenticar por `correo` o `nombre`.

2. ### 👥 **Usuarios**

   * Endpoints: `GET`, `POST`, `PUT`, `DELETE` → `/api/usuarios/`
   * Frontend:

     * `views/usuarios/listar.html`
     * `views/usuarios/registrar.html`
     * `views/usuarios/editar.html`
     * `assets/js/views/usuarios.js`
     * `assets/js/api/usuarios.js`

3. ### 🧾 **Proveedores**

   * Endpoints: `GET`, `POST` → `/api/proveedor/`
   * Frontend:

     * `views/proveedores/listar.html`
     * `views/proveedores/registrar.html`
     * `views/proveedores/editar.html` (aunque tu backend aún no muestra `PUT`/`DELETE`)
     * `assets/js/views/proveedores.js`
     * `assets/js/api/proveedores.js`

4. ### 🛒 **Compras**

   * Endpoints: `GET`, `POST` → `/api/compra/`
   * Frontend:

     * `views/compras/listar.html`
     * `views/compras/registrar.html`
     * `views/compras/editar.html` (similar a proveedores, podrías preparar el frontend para futuros `PUT`/`DELETE`)
     * `assets/js/views/compras.js`
     * `assets/js/api/compras.js`

5. ### 📦 **Inventario**

   * Endpoints: `GET`, `POST` → `/api/inventario/`
   * Frontend:

     * `views/inventario/listar.html`
     * `views/inventario/registrar.html`
     * `views/inventario/editar.html`
     * `assets/js/views/inventario.js`
     * `assets/js/api/inventario.js`

6. ### 💰 **Gastos**

   * Endpoints: `GET`, `POST` → `/api/gastos/`
   * Frontend:

     * `views/gastos/listar.html`
     * `views/gastos/registrar.html`
     * `views/gastos/editar.html`
     * `assets/js/views/gastos.js`
     * `assets/js/api/gastos.js`

---
